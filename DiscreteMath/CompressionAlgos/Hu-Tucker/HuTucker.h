//
// Created by Евгений Дмитриев on 06.06.2021.
//

#ifndef TRAIN_HUTUCKER_H
#define TRAIN_HUTUCKER_H

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <list>
#include <stack>

using namespace std;

/*
 *  Идея работы алгоритма
 * A = {a_1, a_2 ... a_n} - алфавит изи n различных символов
 * W = {w_1, w_2 ... w_n} - набор весов для каждого слова
 * Тогда алгоритм выбора набора бинарных кодов
 * C = {c_1, c_2 ... c_n} такой
 * 1) c_i не является префиксом для c_j при i != j
 * 2) Для всех a_i < a_j выполнено c_i < c_j
 * 3) При удовлетворенности условия 2) Sum where(i in [1, n])) (w_i * c_i.length()
 *   длина кода c_i)
 *   Это Алгоритм Ху-Таккера
 *
 *  Алгоритм
 *  Шаг 0 Понятия
 *      * Две вершины -> пара, если они соседние или между ними нет
 *      вершин алфавита
 *      * Две вершины -> минимальная пара, когда их суммарный вес наименьший
 *      из всех. Приравенстве весов выбирается пара с самой левой вершиной
 *      из всех таких, так. у которой правый узел расположен левее
 *      * Минимальной совместимой парой называется наименьшая пара из всеъ совместимых
 */


class HuTucker {

};


#endif //TRAIN_HUTUCKER_H
